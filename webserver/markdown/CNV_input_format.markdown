# scSVAS File format interpretation

## scSVAS input files



scSVAS CNV analysis accepts the output of [`SCYN`](https://github.com/xikanfeng2/SCYN) or [`cellranger-dna`](xxx).

### SCYN Output File

The output of `SCYN` consits of one cnv file and one meta file. 

 - `*_cnv.csv`: stores the copy number profiles of cells, with cell as row and bin region as column. The first column should be the cell IDs, and the first row should be bin region, e.g. `chr1:1-512000`. User can directly use the `*_cnv.csv` file generated by SCYN. Please note that the column bin regions are recommended to be equal size for best heatmap visualization effect.

 - `*_meta.csv`: stores the meta information of cells, with cell as row, and meta information as column. User can directly use the `*_meta.csv` file generated by SCYN, or manually one. The following are examples of meta fields:

   + `c_gini`: stores the gini coeficient of each cell.
   + `c_ploidy`: stores the mean ploidy of each cell, it is calculated from `prefix_cnv.csv` (not the one SCOPE provide).
     After running [`meta.py`](https://github.com/paprikachan/scVar), user can get `prefix_meta_scvar.csv` with additional meta fields:

   Prefix `c` here denotes numeric continuous value. The absence of prefix `c` denotes category meta information like 'group' or 'cluster'. Prefix `e` refers to embedding and dimension reduction. User can manually add extra cell meta information like 'cell_type' and 'group' for downstream analysis:

    + `cell_type`: predefined cell types.
    + `group`: predefined cell groups.

### 10x cellranger-dna Output File

scSVAS needs one 10x cellranger-dna Output File.

+ `cnv_data.h5`
  `cnv_data.h5` can be obtained by running 10x cellranger-dna if you adopt 10x CNV Solution. 

### Other scSVAS Input File

 + `*.nwk`
   `*.nwk` stores the dendrogram tree in newick format. In dendrogram, the leaf nodes are single cells. For 10x data, user can be obtained the `*.nwk` file by running `process_10x_h5.py`.

## scSVAS Output Files

 + `*_scSVAS.nwk`
   `*_scSVAS.nwk` stores the dendrogram tree build by hierarchy clustering in newick format. In dendrogram, the leaf nodes are single cells.

 + `*_cut.json`
   `*_cut.json` stores cutted dendrogram for all nodes.

  ```Json
   "node_name": {
      "dist_to_root": number,    
      "parent": string,  // parent node name
      "newick": string,  // cutted dendrogram in newick format
      "cells": list of string  // list of cell names included in current node
   }
  ```

  

 + `*_meta_scsvas.csv`

  After running `scSVAS.py`, user can get `*_meta_scsvas.csv` with single cell as row, and following meta field as column:

  + `hcluster`: the hierachy clustering result.
  + `e_PC1`: the first principle component of cells after PCA.
  + `e_PC2`: the second principle component of cells after PCA.
  + `e_TSNE1`: the first dimension of cells after T-distributed Stochastic Neighbor Embedding (t-SNE).
  + `e_TSNE2`: the second dimension of cells after T-distributed Stochastic Neighbor Embedding (t-SNE).
  + `e_UMAP1`: the first dimension of cells after Uniform Manifold Approximation and Projection (UMAP).
  + `e_UMAP2`: the second dimension of cells after Uniform Manifold Approximation and Projection (UMAP).
  Prefix `c` denotes numeric continuous value. The absence of prefix `c` denotes category meta information like `group` or `cluster`. Prefix `e` refers to embedding/dimension reduction methods.


subsubsection{`*_evo.tsv`
`*_evo.tsv} stores the detail of clonal lineages results. The file header are listed as follow:

begin{itemize}
    item `category_label}: categorical meta label, e.g. `hcluster}
    item `parent}: parent node name, e.g. `c1} 
    item `child}: child node namem, e.g. `c2} 
    item `amp/loss}: amplification or deletion, e.g.  `amp}
    item `region}: bin region, e.g. `chr10:10240001-15360000}
    item `cytoband}: cytoband, e.g. `10p13}
    item `parent_cnv}: CN of parent node in specified region, e.g. `1.93} 
    item `child_cnv}: CN of child node in specified region, e.g. `3.42}
    item `shift}: xx, e.g. `1.48}
    item `gene}: genes in specified region, only genes in `target_gene_fn} and gene set will be shown, 
    e.g. `PNISR,CCNC,MMS22L,ASCC3}
end{itemize}

subsubsection{`*_evo.json`
`*_evo.json} stores the all information needed for ``CNV Clonal Lineage'' application. It includes lineage tree structure and all information of `*_evo.tsv}.

subsubsection{`*_hcluster_cnv.csv`
`*_hcluster_cnv.csv} stores the averaging copy number profiles of hcluster groups, with hcluster group as row and bin region as column. The first column stores the hcluster group IDs, and the first row stores bin region, e.g. `chr1:1-512000}. The bin regions are the same with input file `*_cnv.csv}.

subsubsection{`sample_gene_cnv.csv`
`*_hcluster_cnv.csv} stores  the copy number profiles of detected driver gene, with single cell as row and driver gene as column. The first column stores the single cell IDs, and the first row stores driver gene names.



subsubsection{`recurrent.tsv`
File `recurrent.tsv} stores the detail of detected recurrent events. The file header are listed as follow:

begin{itemize}
    item `sample_subclone}: categorical meta label, e.g. `LC009T_c4}
    item `amp/del}: amplification or deletion, e.g.  `del}
    item `region}: bin region, e.g. `chr10:10240001-15360000}
    item `cytoband}: cytoband, e.g. `10p13}
    item `cnv}: CN of current sample subclone in specified region, e.g. `3.42}
    item `shift}: xx, e.g. `1.48}
    item `gene}: genes in specified region, only genes in `target_gene_fn} and gene set will be shown, 
    e.g. `PNISR,CCNC,MMS22L,ASCC3}
end{itemize}

subsubsection{`recurrent.json`
`recurrent.json} stores the all information needed for ``CNV Recurrent Event'' application. It includes all information of `recurrent.tsv}.

subsection{User customized scSVAS input files}

subsubsection{`target_gene_sets.csv`
File `target_gene_sets.csv} specified the molecular signatures database (MSigDB)~cite{liberzon2011molecular, liberzon2015molecular} gene sets and user self-defined gene sets for annotation. A demo file is shown in below:
begin{lstlisting}[language={}, basicstyle=stt]
MSigDB,KEGG_NON_SMALL_CELL_LUNG_CANCER,KEGG_SMALL_CELL_LUNG_CANCER
self-defined gene set 1,NOTCH2,TP53,ALK,SOX2
self-defined gene set 2,NOTCH2,TP53
end{lstlisting}
The first line with starts with `MSigDB}, then follows with names of gene sets defined in MsigDB,  e.g. `KEGG_NON_SMALL_CELL_LUNG_CANCER}. Next, each subsequent line stores a customized gene set. The gene set starts with the name of customized gene set, e.g. `self-defined gene set 1}, then follows with the name of genes in customized gene set, e.g. `NOTCH2,TP53,ALK,SOX2}.

subsubsection{`clonal_edges.csv`
The format of file `clonal_edges.csv} is the same with input format TimeScape~cite{smith2017scape} like in demo file 1, except we can accept extra edge distance like in demo file 2.
begin{center}
    begin{tabular}{cc}
    hline
    demo file 1 & demo file 2  hline
    begin{lstlisting}[language={}, basicstyle=stt]
source,target
n1,n2
n1,n3
n3,n4
n4,n5
end{lstlisting} & 
begin{lstlisting}[language={}, basicstyle=stt]
source,target,dist
n1,n2,1.5
n1,n3,1.5
n3,n4,1
n4,n5,2
end{lstlisting}  hline
end{tabular}
end{center}
The file headers are as follow:
begin{itemize}
    item `source}: The source/parent node of an edge/branch, e.g. `n1}.
    item `target}: The target/child node of an edge/branch, e.g. `n2}.
    item `dist}: Optional, the distance of an edge/branch. e.g. `1.5}.
end{itemize}


subsubsection{`clonal_prev.csv`
The format of file `clonal_prev.csv} is the same with input format TimeScape~cite{smith2017scape} such as the following demo file:
begin{lstlisting}[language={}, basicstyle=stt]
timepoint,clone_id,clonal_prev
Diagnosis,n1,0.1274
Diagnosis,n2,0.5312
Diagnosis,n3,0.2904
Diagnosis,n4,0.0510
Relapse,n5,1.00
end{lstlisting}
The file headers are as follows:
begin{itemize}
    item `timepoint}: The timepoint in the history of tumor evolution, e.g. `Diagnosis}
    item `clone_id}: The node ID in the history of clonal evolution, e.g. `n1}
    item `clonal_prev}: The node prevalence of one subclone at specified timepoint, e.g. `0.1274}.
end{itemize}

subsubsection{`target_reigon.bed`
File `target_reigon.bed} stores user interested local genome regions in BED format. Please check the demo file as follow:
begin{lstlisting}[language={}, basicstyle=stt]
chrom   start   end
chr2    140924620       145924620
chr3    140924620       145924620
end{lstlisting}

 
